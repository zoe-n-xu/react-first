{"version":3,"sources":["Card.js","CardsList.js","SearchBox.js","Scroll.js","App.js","actions.js","constants.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","name","email","CardsList","_ref","robos","map","robo","index","src_Card","key","SearchBox","onSearchTextChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","response","json","users","setState","_this$props","searchField","filteredRobos","filter","toLowerCase","includes","length","src_SearchBox","src_Scroll","src_CardsList","Component","connect","dispatch","event","payload","target","value","Boolean","window","location","hostname","match","initialState","logger","createLogger","store","createStore","arguments","undefined","action","assign","applyMiddleware","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5134c7a6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    return (\n        <div className=\"bg-light-green tc dib br3 pa3 ma2 grow shadow-5\">\n            <img alt=\"robo\" src={`https://robohash.org/${props.name}?100*100`}></img>\n            <div>\n            <h1>{props.name}</h1>\n            <p>{props.email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardsList = ({robos}) => {\n    const CardArray = robos.map((robo, index) => {\n        return <Card key={robo.name} name={robo.name} email={robo.email} />;\n    });\n    return CardArray;\n}\n\nexport default CardsList;","import React from 'react';\n\nconst SearchBox = ({onSearchTextChange}) => {\n    return (\n        <div className=\"pa2\">\n            <input className=\"pa3 ba b--green bg-lightest-blue\"\n            type=\"search\" placeholder=\"search robos\"\n            onChange={onSearchTextChange} />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '600px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardsList from './CardsList';\n// import { data } from './data';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport { connect } from 'react-redux';\nimport { setSearchField } from './actions';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchField\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchTextChange: (event) => dispatch(setSearchField(event.target.value))\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robos: [],\n      // searchText: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => {\n      return response.json();\n    })\n    .then(users => this.setState({ robos: users }));\n  }\n\n  // onSearchTextChange = (event) => {\n  //   this.setState({ searchText: event.target.value});\n  // }\n  \n  render() {\n    const { searchField, onSearchTextChange } = this.props;\n    const filteredRobos = this.state.robos.filter(robo => {\n      return robo.name.toLowerCase().includes(searchField.toLowerCase())\n    });\n    if (this.state.robos.length === 0) {\n      return <h1>Loading</h1>\n    } else {\n      return (\n        <div className=\"tc\">\n            <h1>Hello</h1>\n            <SearchBox onSearchTextChange={onSearchTextChange}></SearchBox>\n            <Scroll>\n              <CardsList robos={filteredRobos}/>\n            </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD } from './constants';\n\n// action\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from './constants';\n\n// state\nconst initialState = {\n    searchField: ''\n}\n\n// reducer\nexport const searchRobos = (state=initialState, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { searchRobos } from './reducer';\nimport { createLogger } from 'redux-logger'; \n\nconst logger = createLogger();\nconst store = createStore(searchRobos, applyMiddleware(logger));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}